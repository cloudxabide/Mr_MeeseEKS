---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC - Private and Public subnets'

Metadata:
  cfn-lint: { config: { ignore_checks: [W3011,E2003,E3006] } }
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - vpc-cidr-block 
          - public-subnet01-cidr-block
          - public-subnet02-cidr-block
          - public-subnet03-cidr-block
          - private-subnet01-cidr-block
          - private-subnet02-cidr-block
          - private-subnet03-cidr-block
          - tgw-subnet01-cidr-block
          - tgw-subnet02-cidr-block
          - tgw-subnet03-cidr-block

Parameters:
  vpc-cidr-block:
    Type: String
    Default: 10.1.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  public-subnet01-cidr-block:
    Type: String
    Default: 10.1.0.0/19
    Description: CidrBlock for public subnet 01 within the VPC

  public-subnet02-cidr-block:
    Type: String
    Default: 10.1.32.0/19
    Description: CidrBlock for public subnet 02 within the VPC

  public-subnet03-cidr-block:
    Type: String
    Default: 10.1.64.0/19
    Description: CidrBlock for public subnet 03 within the VPC

  private-subnet01-cidr-block:
    Type: String
    Default: 10.1.96.0/19
    Description: CidrBlock for private subnet 01 within the VPC

  private-subnet02-cidr-block:
    Type: String
    Default: 10.1.128.0/19
    Description: CidrBlock for private subnet 02 within the VPC

  private-subnet03-cidr-block:
    Type: String
    Default: 10.1.160.0/19
    Description: CidrBlock for private subnet 03 within the VPC

  tgw-subnet01-cidr-block:
    Type: String
    Default: 10.1.192.0/28
    Description: CidrBlock for tgw subnet 01 within the VPC

  tgw-subnet02-cidr-block:
    Type: String
    Default: 10.1.192.16/28
    Description: CidrBlock for tgw subnet 02 within the VPC

  tgw-subnet03-cidr-block:
    Type: String
    Default: 10.1.192.32/28
    Description: CidrBlock for tgw subnet 03 within the VPC

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref vpc-cidr-block 
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-vpc'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  public-route-table:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  private-route-table01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  private-route-table02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  private-route-table03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ3
      - Key: Network
        Value: Private03

  tgw-route-table01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tgw Subnet AZ1
      - Key: Network
        Value: Tgw Route Table01

  tgw-route-table02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tgw Subnet AZ2
      - Key: Network
        Value: Tgw Route Table02

  tgw-route-table03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tgw Subnet AZ3
      - Key: Network
        Value: Tgw Route Table03

  public-route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref public-route-table
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  private-route01:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref private-route-table01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway01

  private-route02:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref private-route-table02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway02

  private-route03:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway03
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref private-route-table03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway03

  tgw-route01:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref tgw-route-table01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway01

  tgw-route02:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref tgw-route-table02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway02

  tgw-route03:
    DependsOn:
    - VPCGatewayAttachment
    - nat-gateway03
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref tgw-route-table03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat-gateway03
  nat-gateway01:
    DependsOn:
    - nat-gatewayEIP1
    - public-subnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'nat-gatewayEIP1.AllocationId'
      SubnetId: !Ref public-subnet01
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-nat-gatewayAZ1'

  nat-gateway02:
    DependsOn:
    - nat-gatewayEIP2
    - public-subnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'nat-gatewayEIP2.AllocationId'
      SubnetId: !Ref public-subnet02
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-nat-gatewayAZ2'

  nat-gateway03:
    DependsOn:
    - nat-gatewayEIP3
    - public-subnet03
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'nat-gatewayEIP3.AllocationId'
      SubnetId: !Ref public-subnet03
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-nat-gatewayAZ3'

  nat-gatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  nat-gatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  nat-gatewayEIP3:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  public-subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: public-subnet01-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-subnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  public-subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: public-subnet02-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-subnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  public-subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: public-subnet03-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-subnet03"
      - Key: kubernetes.io/role/elb
        Value: 1

  private-subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: private-subnet01-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-subnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  private-subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: private-subnet02-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-subnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  private-subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: private-subnet03-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-subnet03"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  tgw-subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Tgw Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: tgw-subnet01-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-tgw-subnet01"

  tgw-subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Tgw Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: tgw-subnet02-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-tgw-subnet02"

  tgw-subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Tgw Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: tgw-subnet03-cidr-block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-tgw-subnet03"

  public-subnet01-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref public-subnet01
      RouteTableId: !Ref public-route-table

  public-subnet02-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref public-subnet02
      RouteTableId: !Ref public-route-table

  public-subnet03-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref public-subnet03
      RouteTableId: !Ref public-route-table

  private-subnet01-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref private-subnet01
      RouteTableId: !Ref private-route-table01

  private-subnet02-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref private-subnet02
      RouteTableId: !Ref private-route-table02

  private-subnet03-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref private-subnet03
      RouteTableId: !Ref private-route-table03

  tgw-subnet01-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref tgw-subnet01
      RouteTableId: !Ref tgw-route-table01

  tgw-subnet02-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref tgw-subnet02
      RouteTableId: !Ref tgw-route-table02

  tgw-subnet03-route-table-association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref tgw-subnet03
      RouteTableId: !Ref tgw-route-table03

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

Outputs:

  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref public-subnet01, !Ref public-subnet02, !Ref public-subnet03,!Ref private-subnet01, !Ref private-subnet02, !Ref private-subnet03 ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
